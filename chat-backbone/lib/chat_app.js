// Generated by CoffeeScript 1.7.1
(function() {
  var chat_app, createId, crypto, socketio, store;

  socketio = require('socket.io');

  crypto = require('crypto');

  store = {
    users: {},
    messages: {}
  };

  createId = function(store) {
    var id;
    while (true) {
      id = Math.random() + new Date().toString();
      id = crypto.createHash('md5').update(id).digest('hex');
      if (store[id] == null) {
        break;
      }
    }
    return id;
  };

  chat_app = function(serverHttp) {
    var io;
    io = socketio.listen(serverHttp);
    return io.sockets.on('connection', function(socket) {
      socket.on('disconnect', function() {
        return socket.get('userId', function(err, ourUserId) {
          var ourUser;
          if (err) {
            throw err;
          }
          if (ourUserId) {
            ourUser = store.users[ourUserId];
            return socket.set('userId', null, function() {
              delete store.users[ourUserId];
              return socket.broadcast.emit('user', 'delete', ourUser);
            });
          }
        });
      });
      socket.on('user', function(method, data, next) {
        return socket.get('userId', function(err, ourUserId) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          console.log('user', method, data.id, ourUserId);
          if (data.id === ourUserId) {
            if (method === 'delete') {
              return typeof next === "function" ? next("you can't delete yourself") : void 0;
            } else {
              store.users[ourUserId] = data;
              socket.broadcast.emit('user', method, data);
              return typeof next === "function" ? next(null, data) : void 0;
            }
          } else {
            return typeof next === "function" ? next('permission problem') : void 0;
          }
        });
      });
      socket.on('message', function(method, data, next) {
        return socket.get('userId', function(err, ourUserId) {
          var ourMessage, ourUser;
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          console.log('message', method, data.author.id, ourUserId);
          ourMessage = data.id ? store.messages[data.id] || null : null;
          switch (method) {
            case 'read':
              break;
            case 'delete':
              if (ourMessage) {
                if (ourMessage.author.id === ourUserId) {
                  delete store.messages[data.id];
                  ourMessage = null;
                } else {
                  return typeof next === "function" ? next('access denied') : void 0;
                }
              } else {
                return typeof next === "function" ? next('not found') : void 0;
              }
              socket.broadcast.emit('message', method, ourMessage);
              break;
            case 'update':
            case 'create':
              if (data.id) {
                if (ourMessage) {
                  if (ourMessage.author.id === ourUserId) {
                    ourUser = store.users[ourUserId];
                    data.author = ourUser;
                    ourMessage = store.messages[data.id] = data;
                  } else {
                    return typeof next === "function" ? next('access denied') : void 0;
                  }
                } else {
                  return typeof next === "function" ? next('not found') : void 0;
                }
              } else {
                if (!data.id) {
                  data.id = createId(store.messages);
                }
                ourUser = store.users[ourUserId];
                data.author = ourUser;
                ourMessage = store.messages[data.id] = data;
              }
              socket.broadcast.emit('message', method, ourMessage);
          }
          return typeof next === "function" ? next(null, ourMessage) : void 0;
        });
      });
      return socket.on('handshake', function(next) {
        return socket.get('userId', function(ourUserId) {
          var ourUser;
          if (!ourUserId) {
            ourUserId = createId(store.users);
            return socket.set('userId', ourUserId, function() {
              return typeof next === "function" ? next(null, ourUserId, null, store.users) : void 0;
            });
          } else {
            ourUser = store.users[ourUserId];
            return typeof next === "function" ? next(null, ourUserId, ourUser || null, store.users) : void 0;
          }
        });
      });
    });
  };

  module.exports = chat_app;

}).call(this);
